---
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import { getCollection } from "astro:content";
import { qualifiedId } from "../../lib/specs";
import { kintsu } from "@/content/specs/config";

const kinds = kintsu.spec_kinds;

// Precompute a promise to load each collection; we await this in-template.
const collectionsPromise = Promise.all(
  kinds.map(async (k: any) => {
    const collectionKey = k.id.toLowerCase();
    const entries = (await getCollection(collectionKey as any)) as any[];
    const sorted = entries.sort((a, b) => a.data.number - b.data.number);
    return { kind: k, collectionKey, entries: sorted };
  }),
);

// We'll load collections in-template to avoid ordering issues during build
// (use an inline await where the collections are rendered).

export const frontmatter = {
  title: "Specifications",
  description:
    "Browse all Kintsu specifications including RFCs, Architecture Decisions, Technical Specifications, and Type System specs.",
};
---

<StarlightPage frontmatter={frontmatter} hasSidebar={true}>
  <div class="specs-index">
    <div class="index-header">
      <p class="intro">
        Comprehensive documentation of Kintsu's design decisions, proposals, and
        technical specifications.
      </p>
    </div>

    {
      (await Promise.all(
        kinds.map(async (k) => {
          const collectionKey = k.id.toLowerCase();
          const entries = (await getCollection(collectionKey as any)) as any[];
          const sorted = entries.sort((a, b) => a.data.number - b.data.number);
          return { kind: k, collectionKey, entries: sorted };
        })
      )).map(({ kind, collectionKey, entries }) => (
        <details class="spec-kind" open>
          <summary class="kind-header">
            <div class="kind-title-row">
              <h2>
                <a href={`/specs/${collectionKey}`}>{kind.name}</a>
              </h2>
              <span class="count">{entries.length} specs</span>
            </div>
            <p class="description">{kind.description}</p>
          </summary>

          <ul class="spec-list">
            {entries.map((entry: any) => {
              const qid = qualifiedId(entry.data.kind, entry.data.number);
              return (
                <li>
                  <a href={`/specs/${collectionKey}/${qid}`}>
                    <span class="spec-id">{qid}</span>
                    <span class="spec-title">{entry.data.title}</span>
                    <span class="spec-meta">
                      {entry.data.status} Â· {entry.data.author}
                    </span>
                  </a>
                </li>
              );
            })}
          </ul>
        </details>
      ))
    }
  </div>
</StarlightPage>

<style>
  .specs-index {
    width: 100%;
  }

  .index-header {
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--sl-color-gray-5);
  }

  .intro {
    margin: 0;
    font-size: 1.125rem;
    color: var(--sl-color-gray-2);
  }

  .spec-kind {
    margin: 2rem 0;
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 8px;
    padding: 0;
    background: var(--sl-color-bg);
  }

  .spec-kind summary {
    cursor: pointer;
    list-style: none;
    padding: 1.25rem 1.5rem;
    user-select: none;
  }

  .spec-kind summary::-webkit-details-marker {
    display: none;
  }

  .spec-kind summary::marker {
    display: none;
  }

  .spec-kind summary:hover {
    background: var(--sl-color-gray-6);
  }

  .kind-header {
    margin: 0;
  }

  .kind-title-row {
    display: flex;
    align-items: baseline;
    gap: 1rem;
    margin-bottom: 0.5rem;
  }

  .kind-header h2 {
    margin: 0;
    font-size: 1.5rem;
    display: inline;
  }

  .kind-header h2 a {
    color: var(--sl-color-white);
    text-decoration: none;
  }

  .kind-header h2 a:hover {
    color: var(--sl-color-text-accent);
  }

  .count {
    font-size: 0.875rem;
    color: var(--sl-color-gray-3);
    font-weight: 500;
  }

  .description {
    margin: 0;
    color: var(--sl-color-gray-2);
    font-size: 0.95rem;
  }

  .spec-list {
    list-style: none;
    padding: 0;
    margin: 0;
    border-top: 1px solid var(--sl-color-gray-5);
  }

  .spec-list li {
    border-bottom: 1px solid var(--sl-color-gray-5);
    transition: background 0.15s ease;
  }

  .spec-list li:hover {
    background: var(--sl-color-gray-6);
  }

  .spec-list a {
    display: grid;
    grid-template-columns: auto 1fr auto;
    gap: 1rem;
    align-items: baseline;
    padding: 0.875rem 1.5rem;
    text-decoration: none;
    color: inherit;
  }

  .spec-id {
    font-family: var(--__sl-font-mono);
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--sl-color-text-accent);
  }

  .spec-title {
    font-weight: 500;
    color: var(--sl-color-white);
  }

  .spec-meta {
    font-size: 0.875rem;
    color: var(--sl-color-gray-3);
    text-align: right;
  }

  @media (max-width: 768px) {
    .spec-list a {
      grid-template-columns: 1fr;
      gap: 0.25rem;
    }

    .spec-meta {
      text-align: left;
    }
  }
</style>
